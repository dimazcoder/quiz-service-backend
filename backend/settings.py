"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    "backend",
]


# Application definition
DEFAULT_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "phonenumber_field",
    "rest_framework_simplejwt",
    "corsheaders",
]

LOCAL_APPS = [
    "clients.apps.ClientsConfig",
    "quizzes.apps.QuizzesConfig",
    "questions.apps.QuestionsConfig",
    "variants.apps.VariantsConfig",
    "attempters.apps.AttemptersConfig",
    "results.apps.ResultsConfig",
    "attempts.apps.AttemptsConfig",
    "customjwt.apps.CustomJWTConfig",
    "users.apps.UsersConfig",
]

INSTALLED_APPS = DEFAULT_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "attempters.middlewares.CheckAttempterInJWTMiddleware",
    # Request логгер.
    # ВАЖНО! Должен быть всегда после всех Middleware, которые модифицируют response
    "backend.middleware.request_log.RequestLogMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.environ.get("MYSQL_DATABASE"),
        "USER": os.environ.get("MYSQL_USER"),
        "PASSWORD": os.environ.get("MYSQL_PASSWORD"),
        "HOST": os.environ.get("MYSQL_HOST"),
        "PORT": os.environ.get("MYSQL_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "ru"

TIME_ZONE = os.environ.get("TZ", "Europe/Kyiv")

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        "customjwt.authentication.CustomJWTAuthentication",
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.AcceptHeaderVersioning",
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
}

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "customjwt.backends.CustomJWTAuthenticationBackend",
]

SIMPLE_JWT = {
    "USER_ID_CLAIM": "user_id",
    "ACCESS_TOKEN_LIFETIME": timedelta(
        minutes=int(os.environ.get("JWT_ACCESS_TOKEN_LIFETIME"))
    ),
    "REFRESH_TOKEN_LIFETIME": timedelta(
        days=int(os.environ.get("JWT_REFRESH_TOKEN_LIFETIME"))
    ),
    "AUTH_HEADER_TYPES": ("Bearer",),
    "ALGORITHM": "HS256",
    "ROTATE_REFRESH_TOKENS": True,
}

DJANGO_LOG_PATH = os.getenv("DJANGO_LOG_PATH", os.path.join(BASE_DIR, "logs/"))
os.makedirs(os.path.dirname(DJANGO_LOG_PATH), exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "main": {
            "()": "backend.logging.formatters.MainFormatter",
            "format": "[{asctime}] {levelname} {message}",
            "style": "{",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        }
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "filter_info_level": {
            "()": "backend.logging.filters.FilterLevels",
            "filter_levels": ["INFO"],
        },
        "filter_error_level": {
            "()": "backend.logging.filters.FilterLevels",
            "filter_levels": ["ERROR"],
        },
        "filter_warning_level": {
            "()": "backend.logging.filters.FilterLevels",
            "filter_levels": ["WARNING"],
        },
    },
    "handlers": {
        "django.db": {
            "level": "DEBUG",
            "filters": [
                "require_debug_true",
            ],
            "class": "logging.FileHandler",
            "filename": DJANGO_LOG_PATH + "django.db.log",
            "formatter": "main",
        },
        "django.app": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": DJANGO_LOG_PATH + "django.app.log",
            "formatter": "main",
            "filters": ["filter_info_level"],
        },
        "django.warning": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": DJANGO_LOG_PATH + "django.warning.log",
            "formatter": "main",
            "filters": ["filter_warning_level"],
        },
        "django.error": {
            "level": "ERROR",
            "class": "logging.FileHandler",
            "filename": DJANGO_LOG_PATH + "django.error.log",
            "formatter": "main",
            "filters": ["filter_error_level"],
        },
    },
    "loggers": {
        "django.db.backends": {
            "level": "DEBUG",
            "handlers": [
                "django.db",
            ],
            "propagate": False,
        },
        "backend.middleware.request_log": {
            "level": "INFO",
            "handlers": [
                "django.app",
                "django.warning",
                "django.error",
            ],
            "propagate": True,
        },
        # 'django.server': {
        #     'handlers': ['django.warning', 'django.error',],
        #     'level': 'WARNING',
        #     'propagate': False,
        # }
    },
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"""redis://{os.environ.get('REDIS_HOST', 'redis')}:{os.environ.get('REDIS_PORT', 6379)}/1""",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    # Пример создания раздела-ключа внутри общего кэша со своими параметрами
    # 'quizzes': {
    #     'BACKEND': 'django_redis.cache.RedisCache',
    #     'LOCATION': f'''redis://{os.environ.get('REDIS_HOST', 'redis')}:{os.environ.get('REDIS_PORT', 6379)}/1''',
    #     'KEY_PREFIX': 'quizz',
    #     'OPTIONS': {
    #         'CLIENT_CLASS': 'django_redis.client.DefaultClient',
    #     }
    # },
}

CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:3000",
    "http://localhost:3000",
]

CORS_ALLOW_CREDENTIALS = True
